{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';export var userSlice=createSlice({name:'user',initialState:{user:null},reducers:{login:function login(state,action){state.user=action.payload;},logout:function logout(state){state.user=null;}}});var _userSlice$actions=userSlice.actions,login=_userSlice$actions.login,logout=_userSlice$actions.logout;// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport{login,logout};export var selectUser=function selectUser(state){return state.user.user;};export default userSlice.reducer;","map":{"version":3,"sources":["/home/ataha/netflix-clone/src/features/userSlice.js"],"names":["createSlice","userSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","reducer"],"mappings":"AAAA,OAASA,WAAT,KAA4B,kBAA5B,CAEA,MAAO,IAAMC,CAAAA,SAAS,CAAGD,WAAW,CAAC,CACnCE,IAAI,CAAE,MAD6B,CAEnCC,YAAY,CAAE,CACbC,IAAI,CAAC,IADQ,CAFqB,CAKnCC,QAAQ,CAAE,CACRC,KAAK,CAAE,eAACC,KAAD,CAAQC,MAAR,CAAiB,CACtBD,KAAK,CAACH,IAAN,CAAaI,MAAM,CAACC,OAApB,CAED,CAJO,CAKRC,MAAM,CAAC,gBAACH,KAAD,CAAS,CACdA,KAAK,CAACH,IAAN,CAAW,IAAX,CACD,CAPO,CALyB,CAAD,CAA7B,C,uBAgByBH,SAAS,CAACU,O,CAA3BL,K,oBAAAA,K,CAAOI,M,oBAAAA,M,CAEtB;AACA;AACA;AACA;AAGA;AACA;AACA;qBACA,MAAO,IAAME,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAAL,KAAK,QAAIA,CAAAA,KAAK,CAACH,IAAN,CAAWA,IAAf,EAAxB,CAEP,cAAeH,CAAAA,SAAS,CAACY,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n   user:null\r\n  },\r\n  reducers: {\r\n    login: (state, action)=>{\r\n      state.user = action.payload;\r\n    \r\n    },\r\n    logout:(state)=>{\r\n      state.user=null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login, logout} = userSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\n\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}