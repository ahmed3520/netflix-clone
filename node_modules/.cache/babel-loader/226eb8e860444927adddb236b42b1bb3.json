{"ast":null,"code":"import _regeneratorRuntime from\"/home/ataha/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/ataha/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/ataha/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import axios from'./axios';import\"./Row.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,_ref$isLargeRow=_ref.isLargeRow,isLargeRow=_ref$isLargeRow===void 0?false:_ref$isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var base_url=\"https://image.tmdb.org/t/p/original/\";useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();console.log(movies);},[fetchUrl]);console.log(title);return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row_posters\",children:movies.map(function(movie){return(isLargeRow&&movie.poster_path||!isLargeRow&&movie.backdrop_path)&&/*#__PURE__*/_jsx(\"img\",{className:\"row_poster \".concat(isLargeRow&&\"row_posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})})]});}export default Row;","map":{"version":3,"sources":["/home/ataha/netflix-clone/src/Row.js"],"names":["React","useEffect","useState","axios","Row","title","fetchUrl","isLargeRow","movies","setMovies","base_url","fetchData","get","request","data","results","console","log","map","movie","poster_path","backdrop_path","name","id"],"mappings":"6aAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CAEA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAO,WAAP,C,wFAEA,QAASC,CAAAA,GAAT,MAAkD,IAApCC,CAAAA,KAAoC,MAApCA,KAAoC,CAA7BC,QAA6B,MAA7BA,QAA6B,sBAAnBC,UAAmB,CAAnBA,UAAmB,0BAAP,KAAO,+BAClBL,QAAQ,CAAC,EAAD,CADU,wCACvCM,MADuC,eAC/BC,SAD+B,eAE9C,GAAMC,CAAAA,QAAQ,CAAE,sCAAhB,CACJT,SAAS,CAAC,UAAI,SACKU,CAAAA,SADL,qIACV,qKAC0BR,CAAAA,KAAK,CAACS,GAAN,CAAUN,QAAV,CAD1B,QACUO,OADV,eAEIJ,SAAS,CAACI,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAFJ,gCAGWF,OAHX,wDADU,4CAMVF,SAAS,GACTK,OAAO,CAACC,GAAR,CAAYT,MAAZ,EACH,CARQ,CAQN,CAACF,QAAD,CARM,CAAT,CASAU,OAAO,CAACC,GAAR,CAAYZ,KAAZ,EACI,mBACI,aAAK,SAAS,CAAC,KAAf,wBACI,oBAAKA,KAAL,EADJ,cAEI,YAAK,SAAS,CAAC,aAAf,UACCG,MAAM,CAACU,GAAP,CAAW,SAACC,KAAD,QACT,CAAEZ,UAAU,EAAIY,KAAK,CAACC,WAArB,EACA,CAACb,UAAD,EAAeY,KAAK,CAACE,aADtB,gBAEC,YAAM,SAAS,sBAAgBd,UAAU,EAAI,iBAA9B,CAAf,CAEA,GAAG,WAAKG,QAAL,SAAgBH,UAAU,CAAEY,KAAK,CAACC,WAAR,CAAqBD,KAAK,CAACE,aAArD,CAFH,CAGA,GAAG,CAAEF,KAAK,CAACG,IAHX,EACKH,KAAK,CAACI,EADX,CAHQ,EAAX,CADD,EAFJ,GADJ,CAkBH,CACD,cAAenB,CAAAA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport axios from './axios'\nimport \"./Row.css\"\n\nfunction Row({title, fetchUrl, isLargeRow= false}){\n    const [movies, setMovies] = useState([])\n    const base_url =\"https://image.tmdb.org/t/p/original/\"\nuseEffect(()=>{\n    async function fetchData(){\n        const request = await axios.get(fetchUrl);\n        setMovies(request.data.results);\n        return request;\n    }\n    fetchData()\n    console.log(movies)\n}, [fetchUrl])\nconsole.log(title)\n    return(\n        <div className=\"row\">\n            <h2>{title}</h2>\n            <div className=\"row_posters\">\n            {movies.map((movie)=>(\n               ((isLargeRow && movie.poster_path)||\n               (!isLargeRow && movie.backdrop_path))&&(\n                <img  className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                key={movie.id}\n                src={`${base_url}${isLargeRow? movie.poster_path: movie.backdrop_path}`} \n                alt={movie.name}/>\n               )\n              \n           ))}\n            </div>\n            \n        </div>\n    )\n}\nexport default Row"]},"metadata":{},"sourceType":"module"}